name: 'XEUR.AI Production Deployment'

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18.17.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =================================================================
  # CODE QUALITY & TESTING
  # =================================================================
  quality-check:
    name: 'Code Quality & Tests'
    runs-on: ubuntu-latest
    steps:
      - name: '📂 Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: '⚙️ Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: '📦 Install Dependencies'
        run: npm ci

      - name: '🔍 Lint Code'
        run: npm run lint:check

      - name: '🎨 Check Code Formatting'
        run: npm run format:check

      - name: '📝 Type Check'
        run: npm run type-check

      - name: '🧪 Run Tests'
        run: npm test

      - name: '🔒 Security Audit'
        run: npm run security:audit

      - name: '📊 Build Analysis'
        run: npm run analyze
        env:
          ANALYZE: true

      - name: '📈 Upload Bundle Analysis'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bundle-analysis
          path: .next/analyze/

  # =================================================================
  # BUILD APPLICATION
  # =================================================================
  build:
    name: 'Build Application'
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: '📂 Checkout Code'
        uses: actions/checkout@v4

      - name: '⚙️ Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: '📦 Install Dependencies'
        run: npm ci

      - name: '🔨 Build Application'
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENVIRONMENT: production
          NEXT_PUBLIC_BUILD_TIME: ${{ github.event.head_commit.timestamp }}
          NEXT_PUBLIC_COMMIT_SHA: ${{ github.sha }}

      - name: '💾 Cache Build Artifacts'
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
            .next/standalone
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: '📤 Upload Build Artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            public/
            package*.json
          retention-days: 1

  # =================================================================
  # SECURITY SCANNING
  # =================================================================
  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: '📂 Checkout Code'
        uses: actions/checkout@v4

      - name: '🔍 Run Trivy Vulnerability Scanner'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: '📊 Upload Trivy Results'
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # =================================================================
  # LIGHTHOUSE PERFORMANCE AUDIT
  # =================================================================
  lighthouse:
    name: 'Lighthouse Audit'
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - name: '📂 Checkout Code'
        uses: actions/checkout@v4

      - name: '⚙️ Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: '📦 Install Dependencies'
        run: npm ci

      - name: '📥 Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: '🚀 Start Application'
        run: |
          npm start &
          sleep 30
        env:
          NODE_ENV: production

      - name: '🔍 Run Lighthouse'
        run: npm run lighthouse
        continue-on-error: true

      - name: '📊 Upload Lighthouse Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: lighthouse-results/

  # =================================================================
  # DEPLOY TO STAGING
  # =================================================================
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.xeur.ai
    steps:
      - name: '📂 Checkout Code'
        uses: actions/checkout@v4

      - name: '📥 Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: '🚀 Deploy to Staging Server'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            cd /var/www/xeur-ai-staging
            git pull origin main
            npm ci --only=production
            npm run build
            pm2 restart xeur-ai-staging

      - name: '🏥 Health Check'
        run: |
          sleep 30
          curl -f https://staging.xeur.ai/health || exit 1

  # =================================================================
  # DEPLOY TO PRODUCTION
  # =================================================================
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://xeur.ai
    steps:
      - name: '📂 Checkout Code'
        uses: actions/checkout@v4

      - name: '🚀 Deploy to Production Server'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /opt/xeur-ai/scripts
            sudo ./deploy.sh production

      - name: '🏥 Health Check'
        run: |
          sleep 60
          curl -f https://xeur.ai/health || exit 1

      - name: '📢 Notify Deployment Success'
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🎉 XEUR.AI deployed successfully to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: '🚨 Notify Deployment Failure'
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ XEUR.AI production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =================================================================
  # POST-DEPLOYMENT MONITORING
  # =================================================================
  post-deployment:
    name: 'Post-Deployment Monitoring'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && needs.deploy-production.result == 'success'
    steps:
      - name: '📊 Performance Monitoring'
        run: |
          echo "🔍 Running post-deployment checks..."
          
          # Check response time
          RESPONSE_TIME=$(curl -w "%{time_total}" -s -o /dev/null https://xeur.ai)
          echo "⏱️ Response time: ${RESPONSE_TIME}s"
          
          # Check if response time is acceptable (< 3 seconds)
          if (( $(echo "$RESPONSE_TIME > 3.0" | bc -l) )); then
            echo "⚠️ Response time is too high!"
            exit 1
          fi

      - name: '🔍 SEO Check'
        run: |
          # Check if meta tags are present
          curl -s https://xeur.ai | grep -q "XEUR.AI" || exit 1
          echo "✅ SEO meta tags verified"

      - name: '🤖 Update Sitemap'
        run: |
          # Ping Google and Bing about sitemap update
          curl -s "https://www.google.com/ping?sitemap=https://xeur.ai/sitemap.xml" || true
          curl -s "https://www.bing.com/ping?sitemap=https://xeur.ai/sitemap.xml" || true
          echo "✅ Search engines notified"

# =================================================================
# WORKFLOW UTILITIES
# =================================================================
  cleanup:
    name: 'Cleanup Artifacts'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: '🧹 Cleanup Build Artifacts'
        uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            build-artifacts
            bundle-analysis
          failOnError: false